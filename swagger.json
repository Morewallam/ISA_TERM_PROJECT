{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "ISA TERM PROJECT"
  },
  "host": "seanwallace.ca",
  "basePath": "/v1",
  "tags": [
    {"name": "reviews",
      "description": "Review Operations"
    },
    {
      "name": "comments",
      "description": "Comment Operations"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/reviews":{
      "get":{
        "tags": [
          "reviews"
        ],
        "summary": "Get all reviews",
        "description": "Returns all Reviews",
        "operationId": "getReviews",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type":"array",
              "items": {"$ref": "#/definitions/review"}
              
            }
          }
        }
      },
      "post": {
        "tags": ["reviews"],
        "summary": "Create a new review",
        "description": "",
        "operationId": "addReview",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Review Object that needs to be added to the site",
            "required": true,
            "schema": {
              "$ref": "#/definitions/review"
            }
          }
        ],
        "responses": {
          "405":{
            "description" :"Invalid Input"
          }
        }
      },
      "put": {
        "tags": ["reviews"],
        "summary": "Update a review",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Review Object that needs to be updated on the site",
            "required": true,
            "schema": {
              "$ref": "#/definitions/review"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Review not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/reviews/{reviewID}":{
      "delete": {
        "tags": ["reviews"],
        "summary": "Delete a review",
        "description": "",
        "operationId": "deleteReview",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "reviewId",
            "in": "path",
            "description": "review id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Review not found"
          }
      }
    }
    },
    "/comments":{
      "post": {
        "tags": ["comments"],
        "summary": "Create a new comment",
        "description": "",
        "operationId": "addComment",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Comment object too be added to a review",
            "required": true,
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        ],
        "responses": {
          "405":{
            "description" :"Invalid Input"
          }
        }
      },
      "put": {
        "tags": ["comments"],
        "summary": "Update a comment",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Comment Object that needs to be updated on the site",
            "required": true,
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Comment not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/comments/{reviewID}":{
      "get":{
        "tags": [
          "comments"
        ],
        "summary": "Get comments for a review",
        "description": "Return the comments for a review",
        "operationId": "getCommentsByReview",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "reviewID",
          "in": "path",
          "description": "review id to get comment",
          "required": true,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type":"array",
              "items": {"$ref": "#/definitions/comment"}
              
            }
          }
        }
      }
    },
    "/comments/{commentID}":{
      "delete": {
        "tags": ["comments"],
        "summary": "Delete a comment",
        "description": "",
        "operationId": "deleteComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "commentID",
            "in": "path",
            "description": "comment id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Comment not found"
          }
      }
    }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }

          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "review":{
      "type": "object",
      "properties": {
        "id":{
          "type":"integer",
          "format": "int64"
        },
        "content":{
          "type":"string"
        },
        "user":{
          "type":"string"
        }
      }
    },
    "comment":{
      "type": "object",
      "properties": {
        "reviewID":{
          "type": "string"
        },
        "id":{
          "type":"integer",
          "format": "int64"
        },
        "content":{
          "type":"string"
        },
        "user":{
          "type":"string"
        }
        
      }
    },
  
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "authorization":{
          "type": "string",
          "enum": [
            "admin",
            "user"
          ]
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
  }
